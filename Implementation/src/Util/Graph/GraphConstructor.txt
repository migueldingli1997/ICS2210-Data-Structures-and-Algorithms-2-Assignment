if (type == 1) { // AUTOMATIC

    // "Designate a random node as the starting node."
    startNode = nodes[UtilityMethods.randInt(0, nodes.length - 1)];

    // "Designate 3 distinct random nodes as goal nodes. "
    goalNodes = new Node[]{null, null, null};
    for (int i = 0; i < 3; /*no increment*/) {
        final Node gNode = nodes[UtilityMethods.randInt(0, nodes.length - 1)];
        if (gNode != goalNodes[(i + 1) % 3] && gNode != goalNodes[(i + 2) % 3]) {
            goalNodes[i] = gNode;
            i++;
        }
    }

    // "For each node, create m distinct directed edges..."
    for (final Node from : nodes) {
        for (int edgeIndex = 0; edgeIndex < from.edgesOut.length; /*no increment*/) {
            final int dstIndex = UtilityMethods.randInt(0, nodes.length - 1);
            if (!existsEdgeBetween(from.ID, dstIndex)) {
                from.edgesOut[edgeIndex] = new Edge(nodes[dstIndex], Math.random());
                edgeIndex++;
            }
        }
    }

} else if (type == 2) { // SIMPLE MANUAL

    startNode = nodes[0];
    goalNodes = new Node[]{nodes[7], nodes[6], nodes[9]};
    nodes[0].edgesOut.add(new Edge(nodes[1], 1));
    nodes[0].edgesOut.add(new Edge(nodes[2], 2));
    nodes[1].edgesOut.add(new Edge(nodes[3], 3));
    nodes[1].edgesOut.add(new Edge(nodes[4], 4));
    nodes[2].edgesOut.add(new Edge(nodes[5], 5));
    nodes[2].edgesOut.add(new Edge(nodes[6], 6));
    nodes[5].edgesOut.add(new Edge(nodes[7], 7));
    nodes[3].edgesOut.add(new Edge(nodes[7], 7));
    /*
           0
       1       2
     3   4   5   6
      7       7
    */

} else if (type == 3) { // COMPLEX MANUAL

    startNode = nodes[4];
    goalNodes = new Node[]{nodes[10], nodes[2], nodes[9]};
    nodes[0].edgesOut.add(new Edge(nodes[8],  0.34));
    nodes[0].edgesOut.add(new Edge(nodes[3],  0.49));
    nodes[1].edgesOut.add(new Edge(nodes[5],  0.77));
    nodes[2].edgesOut.add(new Edge(nodes[0],  0.48));
    nodes[2].edgesOut.add(new Edge(nodes[6],  0.21));
    nodes[2].edgesOut.add(new Edge(nodes[10], 0.93));
    nodes[2].edgesOut.add(new Edge(nodes[4],  0.02));
    nodes[3].edgesOut.add(new Edge(nodes[3],  0.13));
    nodes[3].edgesOut.add(new Edge(nodes[10], 0.73));
    nodes[3].edgesOut.add(new Edge(nodes[5],  0.89));
    nodes[4].edgesOut.add(new Edge(nodes[5],  0.21));
    nodes[4].edgesOut.add(new Edge(nodes[9],  0.05));
    nodes[5].edgesOut.add(new Edge(nodes[3],  0.27));
    nodes[5].edgesOut.add(new Edge(nodes[2],  0.99));
    nodes[5].edgesOut.add(new Edge(nodes[8],  0.68));
    nodes[5].edgesOut.add(new Edge(nodes[4],  0.27));
    nodes[6].edgesOut.add(new Edge(nodes[3],  0.51));
    nodes[6].edgesOut.add(new Edge(nodes[0],  0.08));
    nodes[6].edgesOut.add(new Edge(nodes[2],  0.26));
    nodes[7].edgesOut.add(new Edge(nodes[8],  0.68));
    nodes[7].edgesOut.add(new Edge(nodes[5],  0.97));
    nodes[8].edgesOut.add(new Edge(nodes[4],  0.33));
    nodes[8].edgesOut.add(new Edge(nodes[6],  0.91));
    nodes[8].edgesOut.add(new Edge(nodes[0],  0.95));
    nodes[9].edgesOut.add(new Edge(nodes[5],  0.47));
    nodes[9].edgesOut.add(new Edge(nodes[4],  0.44));
    nodes[9].edgesOut.add(new Edge(nodes[9],  0.07));
    nodes[10].edgesOut.add(new Edge(nodes[0], 0.58));
    nodes[10].edgesOut.add(new Edge(nodes[6], 0.11));
    nodes[10].edgesOut.add(new Edge(nodes[4], 0.5));

} else if (type == 4) { // NO_PATH_TO_GOAL MANUAL

    startNode = nodes[0];
    goalNodes = new Node[]{nodes[9], nodes[9], nodes[9]};
    nodes[0].edgesOut.add(new Edge(nodes[1], 1));
    nodes[1].edgesOut.add(new Edge(nodes[3], 3));
    nodes[1].edgesOut.add(new Edge(nodes[4], 4));
    nodes[3].edgesOut.add(new Edge(nodes[7], 7));
    /*
          0
       1
     3   4      9 (disconnected)
      7
    */

} else { // CYCLE MANUAL

    startNode = nodes[0];
    goalNodes = new Node[]{nodes[9], nodes[9], nodes[9]};
    nodes[0].edgesOut.add(new Edge(nodes[0], 1));
}